dim(a$INNERCODE)
dim(as.array(a$ENDDATE))
as.array(a$ENDDATE)
as.array(a$ENDDATE)[1]
as.array(a$ENDDATE)[[1]]
b = as.array(a$ENDDATE)
View(b)
t(b)
b[[:]]
View(b)
b = t(b)
View(b)
b = as.array(a$ENDDATE)
View(b)
a
View(fundValue)
netValue = sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]})
View(netValue)
View(dataRangeSeq)
dataRangeSeq[[1]]
dataRangeSeq[[90]]
dataRangeSeq[[92]]
dataRangeSeq[[91]]
as.Date(19173)
netValue = lapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]})
as.Date("0-0-0") + days(19173)
as.Date("0-01-01") + days(19173)
netValue
View(netValue)
netValue[1,1,]
netValue[,,1]
as.array(netValue)[1,1,1]
netValueSeq[1,1,1]
netValue
netValue = sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]},simplify = "array")
netValue[1,,1]
netValue[1,,]
netValue[1,,2]
netValue[1,,3]
as.data.frame( netValue[1,,])
View(netValue)
netValue[1,,1]
netValue[1,1,]
netValue = lapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]})
View(netValueSeq)
unstack(netValue)
as.Date(19173,origin="1960")
as.Date(19173,origin="1960-01-01")
netValueSeq[1]
netValue[1,,1]
View(netValue)
as.Date(19173,origin="1970-01-01")
netValue = sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]})
a =as.data.frame(netValue)
a
a =as.data.frame(t(netValue))
a$INNERCODE
a$INNERCODE = as.numeric(a$INNERCODE)
a$INNERCODE
a$INNERCODE = as.character(a$INNERCODE)
a$INNERCODE
a$ENDDATE = apply(a$ENDDATE,as.Date(origin="1970-01-01"))
a$ENDDATE = apply(a$ENDDATE,1,as.Date(origin="1970-01-01"))
a$ENDDATE = mapply(as.Date(),a$ENDDATE,"1970-01-01")
a$ENDDATE = mapply(as.Date,a$ENDDATE,"1970-01-01")
a$ENDDATE
View(netValue)
a$ENDDATE = apply(a$ENDDATE,1,as.Date,origin="1970-01-01")
a$ENDDATE = apply(as.array(a$ENDDATE),1,as.Date,origin="1970-01-01")
a$ENDDATE
a$ENDDATE = apply(a$ENDDATE,1,as.Date,origin="1970-01-01")
dim(a$ENDDATE)
a
a$NV
a$NV = as.numeric(a$NV)
a$NV
a
View(a)
mode(a$ENDDATE)
a$ENDDATE[1]
as.Date(a$ENDDATE[1],origin = "1970-01-01")
mode(as.Date(a$ENDDATE[1],origin = "1970-01-01"))
View(netValue)
netValue.function = function(endDate,data){
startDate = endDate-months(6)
valueRange = data[data$ENDDATE>startDate & data$ENDDATE<=endDate]
netValue = sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]})
return(netValue)
}
netValueSeq = lapply(endDateSeq,netValue.function,data=fundValue)
netValueSeq
View(netValueSeq)
netValueSeq[[1]]
netValueSeq[[4]]
netValueSeq[[91]]
mode(netValueSeq[[91]])
netValueSeq[[91]][1]
net[1]
net[91]
netValueSeq[1]
netValueSeq[2]
netValueSeq[2]
netValueSeq[[2]]
a = netValueSeq[[2]]
View(a)
netValue.function = function(endDate,data){
startDate = endDate-months(6)
valueRange = data[data$ENDDATE>startDate & data$ENDDATE<=endDate]
netValue = t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]}))
return(netValue)
}
netValueSeq = lapply(endDateSeq,netValue.function,data=fundValue)
netValueSeq
netValueSeq[2]
netValueSeq[91]
dataRangeSeq[1]
dataRangeSeq[91]
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
a = data.frame()
colnames(a) = c("a","b")
1:0
data.frame(NA,NA)
betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
betaSeq
betaSeq.function = function(dataRange){
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
betaSeq.function = function(dataRange){
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
betaSeq.function = function(dataRange){
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
print(nrow(betaSeq))
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
betaSeq.function = function(dataRange){
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
cat("here",nrow(betaSeq))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
betaSeq.function = function(dataRange){
print("here")
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
##
#各时刻市场上，基金股票仓位 《-- t时刻，市场上，基金股票仓位 《--
# t时刻，市场上，各基金，股票仓位，净值加权求占比 《-- t时刻，各基金，股票仓位 《--
# t时刻，某基金，股票仓位
##---------------------------------------------------------------
# 寻找时刻t的基金净值
netValue.function = function(endDate,data){
startDate = endDate-months(6)
valueRange = data[data$ENDDATE>startDate & data$ENDDATE<=endDate]
netValue = t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]}))
return(netValue)
}
##---------------------------------------------------------------
# 计算t时刻，某基金股票仓位β
# data为截至t时刻，基金一个月数据，回归得到β
betaOptim.function = function(data){
if(nrow(data)<=5) return(NA)
y = data$NVRDAILYGROWTHRATE
x = data$CHANGEPCT
betas = c(1:200)/200
errors = y - betas%*%t(x)
errorSqrSum = apply(errors*errors,1,sum)
betaOptim = betas[which.min(errorSqrSum)]
return(betaOptim)
}
# 计算t时刻，各基金的持股比例，构成序列betaSeq
betaSeq.function = function(dataRange){
print("3")
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
##---------------------------------------------------------------
#计算t时刻市场上，所有基金持有股票仓位，stockHeld
stockHeld.function = function(dataRange,netValue){
print("1")
betaSeq = betaSeq.function(dataRange)
print("2")
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
##
#各时刻市场上，基金股票仓位 《-- t时刻，市场上，基金股票仓位 《--
# t时刻，市场上，各基金，股票仓位，净值加权求占比 《-- t时刻，各基金，股票仓位 《--
# t时刻，某基金，股票仓位
##---------------------------------------------------------------
# 寻找时刻t的基金净值
netValue.function = function(endDate,data){
startDate = endDate-months(6)
valueRange = data[data$ENDDATE>startDate & data$ENDDATE<=endDate]
netValue = t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]}))
return(netValue)
}
##---------------------------------------------------------------
# 计算t时刻，某基金股票仓位β
# data为截至t时刻，基金一个月数据，回归得到β
betaOptim.function = function(data){
if(nrow(data)<=5) return(NA)
y = data$NVRDAILYGROWTHRATE
x = data$CHANGEPCT
betas = c(1:200)/200
errors = y - betas%*%t(x)
errorSqrSum = apply(errors*errors,1,sum)
betaOptim = betas[which.min(errorSqrSum)]
return(betaOptim)
}
# 计算t时刻，各基金的持股比例，构成序列betaSeq
betaSeq.function = function(dataRange){
print("2")
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) betaSeq = data.frame(NA,NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
##---------------------------------------------------------------
#计算t时刻市场上，所有基金持有股票仓位，stockHeld
stockHeld.function = function(dataRange,netValue){
print("1")
betaSeq = betaSeq.function(dataRange)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
netValue
t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]}))
netValue = t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]$NV}))
netValue
netValue = sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]$NV})
netValue
netValue = lapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]$NV})
netValue
netValue = t(lapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]$NV}))
netValue
sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]$NV})
netValue = t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]}))
View(netValueSeq)
netValue
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
stockHeld.function = function(dataRange,netValue){
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
##
#各时刻市场上，基金股票仓位 《-- t时刻，市场上，基金股票仓位 《--
# t时刻，市场上，各基金，股票仓位，净值加权求占比 《-- t时刻，各基金，股票仓位 《--
# t时刻，某基金，股票仓位
##---------------------------------------------------------------
# 寻找时刻t的基金净值
netValue.function = function(endDate,data){
startDate = endDate-months(6)
valueRange = data[data$ENDDATE>startDate & data$ENDDATE<=endDate]
netValue = t(sapply(split(valueRange,valueRange$INNERCODE),
function(a){a[which.max(a$ENDDATE)]}))
return(netValue)
}
##---------------------------------------------------------------
# 计算t时刻，某基金股票仓位β
# data为截至t时刻，基金一个月数据，回归得到β
betaOptim.function = function(data){
if(nrow(data)<=5) return(NA)
y = data$NVRDAILYGROWTHRATE
x = data$CHANGEPCT
betas = c(1:200)/200
errors = y - betas%*%t(x)
errorSqrSum = apply(errors*errors,1,sum)
betaOptim = betas[which.min(errorSqrSum)]
return(betaOptim)
}
# 计算t时刻，各基金的持股比例，构成序列betaSeq
betaSeq.function = function(dataRange){
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) return(NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
##---------------------------------------------------------------
#计算t时刻市场上，所有基金持有股票仓位，stockHeld
stockHeld.function = function(dataRange,netValue){
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
warnings()
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
View(netValue.function)
length(netValueSeq)
length(dataRangeSeq)
netValueSeq[[1]]
netValueSeq[[2]]
#计算t时刻市场上，所有基金持有股票仓位，stockHeld
stockHeld.function = function(dataRange,netValue){
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
stockHeld.function = function(dataRange,netValue){
browser()
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
dataRange
netValueSeq
netValue
stockHeld.function = function(dataRange,netValue){
browser()
if(all(dataRange) | all(netValue)) return(NA)
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
netValue
all(netValue)
all(dataRange)
dataRange
is.null(dataRange)
nrow(dataRange)==0
stockHeld.function = function(dataRange,netValue){
browser()
if(nrow(dataRange)==0 | is.na(netValue)) return(NA)
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
nrow(dataRange)==0
is.na(netValue)
nrow(dataRange)==0 | is.na(netValue)
stockHeld.function = function(dataRange,netValue){
browser()
if(nrow(dataRange)==0 | nrow(netValue)==0) return(NA)
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print(betaSeq)
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
nrow(dataRange)==0 | nrow(netValue)==0
#计算t时刻市场上，所有基金持有股票仓位，stockHeld
stockHeld.function = function(dataRange,netValue){
browser()
print("HERE")
if(nrow(dataRange)==0 | nrow(netValue)==0) return(NA)
betaSeq = betaSeq.function(dataRange)
if(is.na(betaSeq)) return(NA)
print("HERE AGAIN")
betaWeightSeq = merge(betaSeq,netValue,by="INNERCODE",all=F)
stockHeld = sum(betaWeightSeq$BETA * betaWeightSeq$NV)/sum(betaWeightSeq$NV)
return(stockHeld)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
betaSeq
betaSeq.function = function(dataRange){
browser()
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) return(NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
getwd
getwd()
library(lubridate)
source("E:/MyFiles/Programming/R/fundWebSite/dataHandle.R")
path = "E:/MyFiles/Programming/R/fundWebSite/fundMarket"
setwd(path)
source("stockHeld.R")
# 计算t时刻，各基金的持股比例，构成序列betaSeq
betaSeq.function = function(dataRange){
betaSeq = lapply(split(dataRange,by="INNERCODE"),betaOptim.function)
betaSeq = data.frame(cbind(t(betaSeq),names(betaSeq)))
if(nrow(betaSeq==0)) return(NA)
colnames(betaSeq) = c("BETA","INNERCODE")
row.names(betaSeq) = 1:nrow(betaSeq)
return(betaSeq)
}
source("stockHeld.R")
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
dataRange
split(dataRange,by="INNERCODE")
if(nrow(data)<=5) return(NA)
x
y
length(x)
length(y)
betas
t(x)
betas%*%t(x)
y - betas%*%t(x)
y
x
apply(errors*errors,1,sum)
betas[which.min(errorSqrSum)]
betas
y
x
data
betas[which.min(errorSqrSum)]
y
x
errors
errorSqrSum
data
errorSqrSum
errorSqrSum
data
betaOptim
nrow(data)
nrow(data)
data
nrow(data)
betaOptim
data
stockHeldSeq = mapply(stockHeld.function,dataRangeSeq,netValueSeq)
betaSeq
sum(is.na(betaSeq))
betaSeq
betaSeq
betaSeq
nrow
nrow(betaSeq)
betaSeq
